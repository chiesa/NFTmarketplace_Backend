{
  "address": "0xa232A29941e2Daf1BEb2B5d033c66073045FfE62",
  "abi": [
    {
      "inputs": [],
      "name": "NFT_marketplace__alreadyList",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token",
          "type": "uint256"
        }
      ],
      "name": "NFT_marketplace__invalidNFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFT_marketplace__invalidPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFT_marketplace__invalidWithdraw",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "NFT_marketplace__ownerChange",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        }
      ],
      "name": "NFTSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "NFTlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "listDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawSuccess",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "deleteListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNFTLister",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNFTPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "updateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1da507f4d18964080de9c1b5d2c31e652417c01ab6cc4fb327dde2f20321d8cd",
  "receipt": {
    "to": null,
    "from": "0x3f2e8Dd32d028B14A80856c8da905b0cC4652360",
    "contractAddress": "0xa232A29941e2Daf1BEb2B5d033c66073045FfE62",
    "transactionIndex": 37,
    "gasUsed": "1507341",
    "logsBloom": "0x
    "blockHash": "0x6c4a49adb08c2b20271ea4b2e5c47dba62f80aad1e2ea5480749037f845bf678",
    "transactionHash": "0x1da507f4d18964080de9c1b5d2c31e652417c01ab6cc4fb327dde2f20321d8cd",
    "logs": [],
    "blockNumber": 7942931,
    "cumulativeGasUsed": "9600937",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "0491dd8bc1ba384218f3688dba0801cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NFT_marketplace__alreadyList\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"NFT_marketplace__invalidNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFT_marketplace__invalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFT_marketplace__invalidWithdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NFT_marketplace__ownerChange\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"NFTSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"NFTlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"listDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSuccess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"deleteListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTLister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNFTPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTmarketplace.sol\":\"NFTmarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NFTmarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/* ---- Import ---*/\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/* ---- Error ---*/\\nerror NFT_marketplace__NotPermition();\\nerror NFT_marketplace__invalidNFT(uint token);\\nerror NFT_marketplace__invalidPrice();\\nerror NFT_marketplace__alreadyList();\\nerror NFT_marketplace__ownerChange(address oldOwner, address newOwner);\\nerror NFT_marketplace__invalidWithdraw();\\n\\ncontract NFTmarketplace{\\n    /* ---- Variabili ---*/\\n    //address internal immutable i_owner;\\n    // map addressNFT -> tokenId -> owner + price\\n    mapping(address => mapping (uint => SingleNFT)) private s_listing;\\n    struct SingleNFT{\\n        address sender;\\n        uint price;\\n    }\\n    // address -> amount\\n    mapping (address => uint) internal s_credit;\\n\\n    /* ---- eventi ---*/\\n    event NFTlisted(address _NFTContract, uint _tokenId, uint _price, address seller);\\n    event NFTSold(address from , address to, uint _tokenId, address _nftAddress);\\n    event listDeleted(address _NFTContract, uint _tokenId, address seller);\\n    event withdrawSuccess(address _to, uint amount);\\n\\n    /* ---- modifier ---*/\\n    /*modifier ownerOnly(address sender){\\n        if(sender != i_owner){\\n            revert NFT_marketplace__NotPermition();\\n        }\\n        _;\\n    }*/\\n    bool locked = false;\\n    modifier LockFunction(){\\n        require(!locked, \\\"Impossible call the function\\\");\\n        locked = true; \\n        _;\\n        locked = false;\\n    }\\n    //check if is approved the marketplace\\n    modifier approved(address _NFTContract, uint _tokenId){\\n        IERC721 nft = IERC721(_NFTContract);\\n        if( nft.getApproved(_tokenId) == _NFTContract ){\\n            revert NFT_marketplace__invalidNFT(_tokenId);\\n        }\\n        _;\\n    }\\n    modifier validPrice(address _NFTContract, uint _tokenId){\\n        if( s_listing[_NFTContract][_tokenId].price <= 0){\\n            revert NFT_marketplace__invalidPrice();\\n        }\\n        _;\\n    }\\n\\n    // check valid NFT owner\\n    modifier validOwner(address _NFTContract, uint _tokenId, address _sender){\\n        IERC721 nft = IERC721(_NFTContract);\\n        address NFTRealOwner = nft.ownerOf(_tokenId);\\n        if( NFTRealOwner != _sender ){\\n            revert NFT_marketplace__ownerChange(_sender,NFTRealOwner);\\n        }\\n        _;\\n    }\\n    // check if is already listed\\n    modifier alreadyList(address _NFTContract, uint _tokenId){\\n        if( s_listing[_NFTContract][_tokenId].price > 0 ){\\n            revert NFT_marketplace__alreadyList();\\n        }\\n        _;\\n    }\\n    // check if NFT owner is change\\n    modifier correctOwner(address _NFTContract, uint _tokenId){\\n        IERC721 nft = IERC721(_NFTContract);\\n        address NFTowner = s_listing[_NFTContract][_tokenId].sender;\\n        address NFTRealOwner = nft.ownerOf(_tokenId);\\n        if( NFTRealOwner != NFTowner ){\\n            revert NFT_marketplace__ownerChange(NFTowner,NFTRealOwner);\\n        }\\n        _;\\n    }\\n    modifier NoWithdrawAvaible(address _sender){\\n        uint amount = s_credit[_sender]; \\n        // check if have something to send\\n        if( amount <= 0 ){\\n            revert NFT_marketplace__invalidWithdraw();\\n        }\\n        _;\\n    }\\n\\n\\n\\n    /* ---- costruttore ---\\n    constructor(){\\n        i_owner = msg.sender;\\n    }*/\\n\\n    /* ---- function ---*/\\n    function listItem(address _NFTContract, uint _tokenId, uint _price) external \\n    approved(_NFTContract, _tokenId)\\n    alreadyList(_NFTContract, _tokenId)\\n    validOwner(_NFTContract, _tokenId, msg.sender)\\n    {\\n        if( _price <= 0){\\n            revert NFT_marketplace__invalidPrice();\\n        }\\n    \\n        // listing\\n        s_listing[_NFTContract][_tokenId] = SingleNFT(msg.sender, _price);\\n        // event\\n        emit NFTlisted( _NFTContract, _tokenId, _price, msg.sender);\\n    }\\n\\n    function buyItem(address _NFTContract, uint _tokenId) external payable\\n    LockFunction()\\n    approved(_NFTContract, _tokenId)\\n    validPrice(_NFTContract, _tokenId)\\n    //correctOwner(_NFTContract, _tokenId) => manda in errore la compilazione massimo 3 modifier\\n    {\\n        // riscrittura correctOwner\\n        IERC721 nft = IERC721(_NFTContract);\\n        address NFTowner = s_listing[_NFTContract][_tokenId].sender;\\n        address NFTRealOwner = nft.ownerOf(_tokenId);\\n        if( NFTRealOwner != NFTowner ){\\n            revert NFT_marketplace__ownerChange(NFTowner,NFTRealOwner);\\n        }\\n        // check if amount is correct for buy\\n        if( msg.value < s_listing[_NFTContract][_tokenId].price){\\n            revert NFT_marketplace__invalidPrice();\\n        }        \\n    \\n        // delete listing\\n        delete(s_listing[_NFTContract][_tokenId]);\\n        // add money to the seller\\n        s_credit[NFTowner] = msg.value;\\n        // NFT safe transfert\\n        nft.safeTransferFrom(NFTowner,msg.sender,_tokenId);\\n        // emit\\n        emit NFTSold(NFTowner,msg.sender,_tokenId,_NFTContract);\\n    }\\n\\n    function deleteListing(address _NFTContract, uint _tokenId) external \\n    approved(_NFTContract, _tokenId)\\n    validPrice(_NFTContract, _tokenId)\\n    validOwner(_NFTContract, _tokenId, msg.sender)\\n    {\\n        // delete listed\\n        delete(s_listing[_NFTContract][_tokenId]);\\n        // emit\\n        emit listDeleted( _NFTContract, _tokenId, msg.sender);\\n    }\\n\\n    function updateListing(address _NFTContract, uint _tokenId, uint _price) external \\n    LockFunction()\\n    validOwner(_NFTContract, _tokenId, msg.sender)\\n    correctOwner(_NFTContract, _tokenId)\\n    {\\n        // check valid price\\n        if( _price <= 0){\\n            revert NFT_marketplace__invalidPrice();\\n        }\\n     \\n        //update price\\n        s_listing[_NFTContract][_tokenId].price = _price;\\n\\n        //emit\\n        emit NFTlisted( _NFTContract, _tokenId, _price,msg.sender);\\n\\n    }\\n\\n    // inquanto ho un invio di soldi voglio ReentrancyGuard\\n    function withdraw() external payable \\n    LockFunction()\\n    NoWithdrawAvaible(msg.sender)\\n    {\\n        uint amount = s_credit[msg.sender]; \\n        // delete amount\\n        delete(s_credit[msg.sender]);\\n        // send money (with call)\\n        (bool success,)= (msg.sender).call{value: amount}(\\\"\\\");\\n        // emit\\n        if(!success){\\n            revert NFT_marketplace__invalidWithdraw();\\n        }\\n        emit withdrawSuccess(msg.sender, amount);\\n    }\\n\\n    /* ---- GET Function ---*/\\n    function getNFTPrice(address _NFTContract, uint _tokenId) public view returns(uint){\\n        return s_listing[_NFTContract][_tokenId].price;\\n    }\\n\\n    function getNFTLister(address _NFTContract, uint _tokenId) public view returns(address){\\n        return s_listing[_NFTContract][_tokenId].sender;\\n    }\\n\\n    function getAccountBalance(address account) public view returns(uint){\\n        return s_credit[account];\\n    }\\n\\n}\",\"keccak256\":\"0x562d9ec1bd6e48a63c39ce1e0d3e09da1180f0865422b1adfc0dbe78785e5e82\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600260006101000a81548160ff02191690831515021790555034801561002b57600080fd5b50611a638061003b6000396000f3fe60806040526004361061007b5760003560e01c80639f37092a1161004e5780639f37092a14610119578063bc24179314610135578063f772adf114610172578063f7e6f62a1461019b5761007b565b80633ccfd60b146100805780634fe5d9851461008a57806389bfd38f146100b357806393423e9c146100dc575b600080fd5b6100886101d8565b005b34801561009657600080fd5b506100b160048036038101906100ac91906116ca565b610446565b005b3480156100bf57600080fd5b506100da60048036038101906100d5919061170a565b6107a5565b005b3480156100e857600080fd5b5061010360048036038101906100fe9190611670565b610b8f565b604051610110919061195b565b60405180910390f35b610133600480360381019061012e91906116ca565b610bd8565b005b34801561014157600080fd5b5061015c600480360381019061015791906116ca565b611170565b604051610169919061195b565b60405180910390f35b34801561017e57600080fd5b506101996004803603810190610194919061170a565b6111cd565b005b3480156101a757600080fd5b506101c260048036038101906101bd91906116ca565b6115b4565b6040516101cf91906117d6565b60405180910390f35b600260009054906101000a900460ff1615610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f9061193b565b60405180910390fd5b6001600260006101000a81548160ff021916908315150217905550336000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116102c2576040517f165407db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905560003373ffffffffffffffffffffffffffffffffffffffff168260405161036f906117c1565b60006040518083038185875af1925050503d80600081146103ac576040519150601f19603f3d011682016040523d82523d6000602084013e6103b1565b606091505b50509050806103ec576040517f165407db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f93740124b37b8f64043ddd706a499c11b58d2642466169e4c310f6b55ead67b6338360405161041d929190611896565b60405180910390a1505050506000600260006101000a81548160ff021916908315150217905550565b818160008290508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc846040518263ffffffff1660e01b815260040161049d919061195b565b60206040518083038186803b1580156104b557600080fd5b505afa1580156104c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ed919061169d565b73ffffffffffffffffffffffffffffffffffffffff16141561054657816040517f0dc1ba4700000000000000000000000000000000000000000000000000000000815260040161053d919061195b565b60405180910390fd5b848460008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060010154116105d4576040517f279b7a4800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b868633600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610617919061195b565b60206040518083038186803b15801561062f57600080fd5b505afa158015610643573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610667919061169d565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106db5782816040517f596bf6600000000000000000000000000000000000000000000000000000000081526004016106d29291906117f1565b60405180910390fd5b6000808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c8152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550507f2792acf8daa5cb518a59b91eda2efb1862a63dac4bb090861d0506747ad31c0a8c8c3360405161078f939291906118bf565b60405180910390a1505050505050505050505050565b828260008290508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc846040518263ffffffff1660e01b81526004016107fc919061195b565b60206040518083038186803b15801561081457600080fd5b505afa158015610828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084c919061169d565b73ffffffffffffffffffffffffffffffffffffffff1614156108a557816040517f0dc1ba4700000000000000000000000000000000000000000000000000000000815260040161089c919061195b565b60405180910390fd5b858560008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600101541115610934576040517f952b7dfc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b878733600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610977919061195b565b60206040518083038186803b15801561098f57600080fd5b505afa1580156109a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c7919061169d565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a3b5782816040517f596bf660000000000000000000000000000000000000000000000000000000008152600401610a329291906117f1565b60405180910390fd5b60008b11610a75576040517f279b7a4800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018c8152506000808f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050507f3cc3cc7b7f53266440a268608eab0b6288d56b477e487f2dd19df1eadad43ced8d8d8d33604051610b7894939291906118f6565b60405180910390a150505050505050505050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900460ff1615610c28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1f9061193b565b60405180910390fd5b6001600260006101000a81548160ff021916908315150217905550818160008290508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc846040518263ffffffff1660e01b8152600401610c9a919061195b565b60206040518083038186803b158015610cb257600080fd5b505afa158015610cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cea919061169d565b73ffffffffffffffffffffffffffffffffffffffff161415610d4357816040517f0dc1ba47000000000000000000000000000000000000000000000000000000008152600401610d3a919061195b565b60405180910390fd5b848460008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206001015411610dd1576040517f279b7a4800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087905060008060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008273ffffffffffffffffffffffffffffffffffffffff16636352211e8a6040518263ffffffff1660e01b8152600401610e88919061195b565b60206040518083038186803b158015610ea057600080fd5b505afa158015610eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed8919061169d565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610f4c5781816040517f596bf660000000000000000000000000000000000000000000000000000000008152600401610f439291906117f1565b60405180910390fd5b6000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060010154341015610fd8576040517f279b7a4800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a8152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055505034600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff166342842e0e83338c6040518463ffffffff1660e01b81526004016110da9392919061181a565b600060405180830381600087803b1580156110f457600080fd5b505af1158015611108573d6000803e3d6000fd5b505050507fcd3a56b6cdb5e297ca88a1fd5d80f5c558c972ad6abfabf7f9ad57e92fcbe6ed82338b8d6040516111419493929190611851565b60405180910390a150505050505050506000600260006101000a81548160ff0219169083151502179055505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060010154905092915050565b600260009054906101000a900460ff161561121d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112149061193b565b60405180910390fd5b6001600260006101000a81548160ff021916908315150217905550828233600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161127b919061195b565b60206040518083038186803b15801561129357600080fd5b505afa1580156112a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cb919061169d565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461133f5782816040517f596bf6600000000000000000000000000000000000000000000000000000000081526004016113369291906117f1565b60405180910390fd5b8787600082905060008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008273ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016113f8919061195b565b60206040518083038186803b15801561141057600080fd5b505afa158015611424573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611448919061169d565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146114bc5781816040517f596bf6600000000000000000000000000000000000000000000000000000000081526004016114b39291906117f1565b60405180910390fd5b60008b116114f6576040517f279b7a4800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8a6000808f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e8152602001908152602001600020600101819055507f3cc3cc7b7f53266440a268608eab0b6288d56b477e487f2dd19df1eadad43ced8d8d8d3360405161158294939291906118f6565b60405180910390a1505050505050505050506000600260006101000a81548160ff021916908315150217905550505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b600081359050611640816119ff565b92915050565b600081519050611655816119ff565b92915050565b60008135905061166a81611a16565b92915050565b600060208284031215611686576116856119ce565b5b600061169484828501611631565b91505092915050565b6000602082840312156116b3576116b26119ce565b5b60006116c184828501611646565b91505092915050565b600080604083850312156116e1576116e06119ce565b5b60006116ef85828601611631565b92505060206117008582860161165b565b9150509250929050565b600080600060608486031215611723576117226119ce565b5b600061173186828701611631565b93505060206117428682870161165b565b92505060406117538682870161165b565b9150509250925092565b61176681611992565b82525050565b6000611779600083611976565b9150611784826119d3565b600082019050919050565b600061179c601c83611981565b91506117a7826119d6565b602082019050919050565b6117bb816119c4565b82525050565b60006117cc8261176c565b9150819050919050565b60006020820190506117eb600083018461175d565b92915050565b6000604082019050611806600083018561175d565b611813602083018461175d565b9392505050565b600060608201905061182f600083018661175d565b61183c602083018561175d565b61184960408301846117b2565b949350505050565b6000608082019050611866600083018761175d565b611873602083018661175d565b61188060408301856117b2565b61188d606083018461175d565b95945050505050565b60006040820190506118ab600083018561175d565b6118b860208301846117b2565b9392505050565b60006060820190506118d4600083018661175d565b6118e160208301856117b2565b6118ee604083018461175d565b949350505050565b600060808201905061190b600083018761175d565b61191860208301866117b2565b61192560408301856117b2565b611932606083018461175d565b95945050505050565b600060208201905081810360008301526119548161178f565b9050919050565b600060208201905061197060008301846117b2565b92915050565b600081905092915050565b600082825260208201905092915050565b600061199d826119a4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b50565b7f496d706f737369626c652063616c6c207468652066756e6374696f6e00000000600082015250565b611a0881611992565b8114611a1357600080fd5b50565b611a1f816119c4565b8114611a2a57600080fd5b5056fea2646970667358221220fea3bfd8219586f8241724d75b556d484f92657d653bc4070594b1ccce316ef164736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639f37092a1161004e5780639f37092a14610119578063bc24179314610135578063f772adf114610172578063f7e6f62a1461019b5761007b565b80633ccfd60b146100805780634fe5d9851461008a57806389bfd38f146100b357806393423e9c146100dc575b600080fd5b6100886101d8565b005b34801561009657600080fd5b506100b160048036038101906100ac91906116ca565b610446565b005b3480156100bf57600080fd5b506100da60048036038101906100d5919061170a565b6107a5565b005b3480156100e857600080fd5b5061010360048036038101906100fe9190611670565b610b8f565b604051610110919061195b565b60405180910390f35b610133600480360381019061012e91906116ca565b610bd8565b005b34801561014157600080fd5b5061015c600480360381019061015791906116ca565b611170565b604051610169919061195b565b60405180910390f35b34801561017e57600080fd5b506101996004803603810190610194919061170a565b6111cd565b005b3480156101a757600080fd5b506101c260048036038101906101bd91906116ca565b6115b4565b6040516101cf91906117d6565b60405180910390f35b600260009054906101000a900460ff1615610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f9061193b565b60405180910390fd5b6001600260006101000a81548160ff021916908315150217905550336000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116102c2576040517f165407db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905560003373ffffffffffffffffffffffffffffffffffffffff168260405161036f906117c1565b60006040518083038185875af1925050503d80600081146103ac576040519150601f19603f3d011682016040523d82523d6000602084013e6103b1565b606091505b50509050806103ec576040517f165407db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f93740124b37b8f64043ddd706a499c11b58d2642466169e4c310f6b55ead67b6338360405161041d929190611896565b60405180910390a1505050506000600260006101000a81548160ff021916908315150217905550565b818160008290508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc846040518263ffffffff1660e01b815260040161049d919061195b565b60206040518083038186803b1580156104b557600080fd5b505afa1580156104c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ed919061169d565b73ffffffffffffffffffffffffffffffffffffffff16141561054657816040517f0dc1ba4700000000000000000000000000000000000000000000000000000000815260040161053d919061195b565b60405180910390fd5b848460008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060010154116105d4576040517f279b7a4800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b868633600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610617919061195b565b60206040518083038186803b15801561062f57600080fd5b505afa158015610643573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610667919061169d565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106db5782816040517f596bf6600000000000000000000000000000000000000000000000000000000081526004016106d29291906117f1565b60405180910390fd5b6000808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c8152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550507f2792acf8daa5cb518a59b91eda2efb1862a63dac4bb090861d0506747ad31c0a8c8c3360405161078f939291906118bf565b60405180910390a1505050505050505050505050565b828260008290508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc846040518263ffffffff1660e01b81526004016107fc919061195b565b60206040518083038186803b15801561081457600080fd5b505afa158015610828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084c919061169d565b73ffffffffffffffffffffffffffffffffffffffff1614156108a557816040517f0dc1ba4700000000000000000000000000000000000000000000000000000000815260040161089c919061195b565b60405180910390fd5b858560008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600101541115610934576040517f952b7dfc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b878733600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610977919061195b565b60206040518083038186803b15801561098f57600080fd5b505afa1580156109a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c7919061169d565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a3b5782816040517f596bf660000000000000000000000000000000000000000000000000000000008152600401610a329291906117f1565b60405180910390fd5b60008b11610a75576040517f279b7a4800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018c8152506000808f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050507f3cc3cc7b7f53266440a268608eab0b6288d56b477e487f2dd19df1eadad43ced8d8d8d33604051610b7894939291906118f6565b60405180910390a150505050505050505050505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900460ff1615610c28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1f9061193b565b60405180910390fd5b6001600260006101000a81548160ff021916908315150217905550818160008290508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc846040518263ffffffff1660e01b8152600401610c9a919061195b565b60206040518083038186803b158015610cb257600080fd5b505afa158015610cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cea919061169d565b73ffffffffffffffffffffffffffffffffffffffff161415610d4357816040517f0dc1ba47000000000000000000000000000000000000000000000000000000008152600401610d3a919061195b565b60405180910390fd5b848460008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206001015411610dd1576040517f279b7a4800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087905060008060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008273ffffffffffffffffffffffffffffffffffffffff16636352211e8a6040518263ffffffff1660e01b8152600401610e88919061195b565b60206040518083038186803b158015610ea057600080fd5b505afa158015610eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed8919061169d565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610f4c5781816040517f596bf660000000000000000000000000000000000000000000000000000000008152600401610f439291906117f1565b60405180910390fd5b6000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060010154341015610fd8576040517f279b7a4800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a8152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055505034600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff166342842e0e83338c6040518463ffffffff1660e01b81526004016110da9392919061181a565b600060405180830381600087803b1580156110f457600080fd5b505af1158015611108573d6000803e3d6000fd5b505050507fcd3a56b6cdb5e297ca88a1fd5d80f5c558c972ad6abfabf7f9ad57e92fcbe6ed82338b8d6040516111419493929190611851565b60405180910390a150505050505050506000600260006101000a81548160ff0219169083151502179055505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060010154905092915050565b600260009054906101000a900460ff161561121d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112149061193b565b60405180910390fd5b6001600260006101000a81548160ff021916908315150217905550828233600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161127b919061195b565b60206040518083038186803b15801561129357600080fd5b505afa1580156112a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cb919061169d565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461133f5782816040517f596bf6600000000000000000000000000000000000000000000000000000000081526004016113369291906117f1565b60405180910390fd5b8787600082905060008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008273ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016113f8919061195b565b60206040518083038186803b15801561141057600080fd5b505afa158015611424573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611448919061169d565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146114bc5781816040517f596bf6600000000000000000000000000000000000000000000000000000000081526004016114b39291906117f1565b60405180910390fd5b60008b116114f6576040517f279b7a4800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8a6000808f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e8152602001908152602001600020600101819055507f3cc3cc7b7f53266440a268608eab0b6288d56b477e487f2dd19df1eadad43ced8d8d8d3360405161158294939291906118f6565b60405180910390a1505050505050505050506000600260006101000a81548160ff021916908315150217905550505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b600081359050611640816119ff565b92915050565b600081519050611655816119ff565b92915050565b60008135905061166a81611a16565b92915050565b600060208284031215611686576116856119ce565b5b600061169484828501611631565b91505092915050565b6000602082840312156116b3576116b26119ce565b5b60006116c184828501611646565b91505092915050565b600080604083850312156116e1576116e06119ce565b5b60006116ef85828601611631565b92505060206117008582860161165b565b9150509250929050565b600080600060608486031215611723576117226119ce565b5b600061173186828701611631565b93505060206117428682870161165b565b92505060406117538682870161165b565b9150509250925092565b61176681611992565b82525050565b6000611779600083611976565b9150611784826119d3565b600082019050919050565b600061179c601c83611981565b91506117a7826119d6565b602082019050919050565b6117bb816119c4565b82525050565b60006117cc8261176c565b9150819050919050565b60006020820190506117eb600083018461175d565b92915050565b6000604082019050611806600083018561175d565b611813602083018461175d565b9392505050565b600060608201905061182f600083018661175d565b61183c602083018561175d565b61184960408301846117b2565b949350505050565b6000608082019050611866600083018761175d565b611873602083018661175d565b61188060408301856117b2565b61188d606083018461175d565b95945050505050565b60006040820190506118ab600083018561175d565b6118b860208301846117b2565b9392505050565b60006060820190506118d4600083018661175d565b6118e160208301856117b2565b6118ee604083018461175d565b949350505050565b600060808201905061190b600083018761175d565b61191860208301866117b2565b61192560408301856117b2565b611932606083018461175d565b95945050505050565b600060208201905081810360008301526119548161178f565b9050919050565b600060208201905061197060008301846117b2565b92915050565b600081905092915050565b600082825260208201905092915050565b600061199d826119a4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b50565b7f496d706f737369626c652063616c6c207468652066756e6374696f6e00000000600082015250565b611a0881611992565b8114611a1357600080fd5b50565b611a1f816119c4565b8114611a2a57600080fd5b5056fea2646970667358221220fea3bfd8219586f8241724d75b556d484f92657d653bc4070594b1ccce316ef164736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2561,
        "contract": "contracts/NFTmarketplace.sol:NFTmarketplace",
        "label": "s_listing",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(SingleNFT)2566_storage))"
      },
      {
        "astId": 2570,
        "contract": "contracts/NFTmarketplace.sol:NFTmarketplace",
        "label": "s_credit",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2607,
        "contract": "contracts/NFTmarketplace.sol:NFTmarketplace",
        "label": "locked",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(SingleNFT)2566_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NFTmarketplace.SingleNFT))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(SingleNFT)2566_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(SingleNFT)2566_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTmarketplace.SingleNFT)",
        "numberOfBytes": "32",
        "value": "t_struct(SingleNFT)2566_storage"
      },
      "t_struct(SingleNFT)2566_storage": {
        "encoding": "inplace",
        "label": "struct NFTmarketplace.SingleNFT",
        "members": [
          {
            "astId": 2563,
            "contract": "contracts/NFTmarketplace.sol:NFTmarketplace",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2565,
            "contract": "contracts/NFTmarketplace.sol:NFTmarketplace",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}