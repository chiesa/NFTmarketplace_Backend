{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/NFTmarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n/* ---- Import ---*/\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/* ---- Error ---*/\nerror NFT_marketplace__NotPermition();\nerror NFT_marketplace__invalidNFT(uint token);\nerror NFT_marketplace__invalidPrice();\nerror NFT_marketplace__alreadyList();\nerror NFT_marketplace__ownerChange(address oldOwner, address newOwner);\nerror NFT_marketplace__invalidWithdraw();\n\ncontract NFTmarketplace{\n    /* ---- Variabili ---*/\n    //address internal immutable i_owner;\n    // map addressNFT -> tokenId -> owner + price\n    mapping(address => mapping (uint => SingleNFT)) private s_listing;\n    struct SingleNFT{\n        address sender;\n        uint price;\n    }\n    // address -> amount\n    mapping (address => uint) internal s_credit;\n\n    /* ---- eventi ---*/\n    event NFTlisted(address _NFTContract, uint _tokenId, uint _price);\n    event NFTSold(address from , address to, uint _tokenId);\n    event listDeleted(address _NFTContract, uint _tokenId);\n    event listingUpdate(address _NFTContract, uint _tokenId, uint _price);\n    event withdrawSuccess(address _to, uint amount);\n\n    /* ---- modifier ---*/\n    /*modifier ownerOnly(address sender){\n        if(sender != i_owner){\n            revert NFT_marketplace__NotPermition();\n        }\n        _;\n    }*/\n    bool locked = false;\n    modifier LockFunction(){\n        require(!locked, \"Impossible call the function\");\n        locked = true; \n        _;\n        locked = false;\n    }\n    //check if is approved the marketplace\n    modifier approved(address _NFTContract, uint _tokenId){\n        IERC721 nft = IERC721(_NFTContract);\n        if( nft.getApproved(_tokenId) == _NFTContract ){\n            revert NFT_marketplace__invalidNFT(_tokenId);\n        }\n        _;\n    }\n    modifier validPrice(address _NFTContract, uint _tokenId){\n        if( s_listing[_NFTContract][_tokenId].price <= 0){\n            revert NFT_marketplace__invalidPrice();\n        }\n        _;\n    }\n\n    // check valid NFT owner\n    modifier validOwner(address _NFTContract, uint _tokenId, address _sender){\n        IERC721 nft = IERC721(_NFTContract);\n        address NFTRealOwner = nft.ownerOf(_tokenId);\n        if( NFTRealOwner != _sender ){\n            revert NFT_marketplace__ownerChange(_sender,NFTRealOwner);\n        }\n        _;\n    }\n    // check if is already listed\n    modifier alreadyList(address _NFTContract, uint _tokenId){\n        if( s_listing[_NFTContract][_tokenId].price > 0 ){\n            revert NFT_marketplace__alreadyList();\n        }\n        _;\n    }\n    // check if NFT owner is change\n    modifier correctOwner(address _NFTContract, uint _tokenId){\n        IERC721 nft = IERC721(_NFTContract);\n        address NFTowner = s_listing[_NFTContract][_tokenId].sender;\n        address NFTRealOwner = nft.ownerOf(_tokenId);\n        if( NFTRealOwner != NFTowner ){\n            revert NFT_marketplace__ownerChange(NFTowner,NFTRealOwner);\n        }\n        _;\n    }\n    modifier NoWithdrawAvaible(address _sender){\n        uint amount = s_credit[_sender]; \n        // check if have something to send\n        if( amount <= 0 ){\n            revert NFT_marketplace__invalidWithdraw();\n        }\n        _;\n    }\n\n\n\n    /* ---- costruttore ---\n    constructor(){\n        i_owner = msg.sender;\n    }*/\n\n    /* ---- function ---*/\n    function listItem(address _NFTContract, uint _tokenId, uint _price) external \n    approved(_NFTContract, _tokenId)\n    alreadyList(_NFTContract, _tokenId)\n    validOwner(_NFTContract, _tokenId, msg.sender)\n    {\n        if( _price <= 0){\n            revert NFT_marketplace__invalidPrice();\n        }\n    \n        // listing\n        s_listing[_NFTContract][_tokenId] = SingleNFT(msg.sender, _price);\n        // event\n        emit NFTlisted( _NFTContract, _tokenId, _price );\n    }\n\n    function buyItem(address _NFTContract, uint _tokenId) external payable\n    LockFunction()\n    approved(_NFTContract, _tokenId)\n    validPrice(_NFTContract, _tokenId)\n    //correctOwner(_NFTContract, _tokenId) => manda in errore la compilazione massimo 3 modifier\n    {\n        // riscrittura correctOwner\n        IERC721 nft = IERC721(_NFTContract);\n        address NFTowner = s_listing[_NFTContract][_tokenId].sender;\n        address NFTRealOwner = nft.ownerOf(_tokenId);\n        if( NFTRealOwner != NFTowner ){\n            revert NFT_marketplace__ownerChange(NFTowner,NFTRealOwner);\n        }\n        // check if amount is correct for buy\n        if( msg.value < s_listing[_NFTContract][_tokenId].price){\n            revert NFT_marketplace__invalidPrice();\n        }        \n    \n        // delete listing\n        delete(s_listing[_NFTContract][_tokenId]);\n        // add money to the seller\n        s_credit[NFTowner] = msg.value;\n        // NFT safe transfert\n        nft.safeTransferFrom(NFTowner,msg.sender,_tokenId);\n        // emit\n        emit NFTSold(NFTowner,msg.sender,_tokenId);\n    }\n\n    function deleteListing(address _NFTContract, uint _tokenId) external \n    approved(_NFTContract, _tokenId)\n    validPrice(_NFTContract, _tokenId)\n    validOwner(_NFTContract, _tokenId, msg.sender)\n    {\n        // delete listed\n        delete(s_listing[_NFTContract][_tokenId]);\n        // emit\n        emit listDeleted( _NFTContract, _tokenId);\n    }\n\n    function updateListing(address _NFTContract, uint _tokenId, uint _price) external \n    LockFunction()\n    validOwner(_NFTContract, _tokenId, msg.sender)\n    correctOwner(_NFTContract, _tokenId)\n    {\n        // check valid price\n        if( _price <= 0){\n            revert NFT_marketplace__invalidPrice();\n        }\n     \n        //update price\n        s_listing[_NFTContract][_tokenId].price = _price;\n\n        //emit\n        emit listingUpdate( _NFTContract, _tokenId, _price);\n\n    }\n\n    // inquanto ho un invio di soldi voglio ReentrancyGuard\n    function withdraw() external payable \n    LockFunction()\n    NoWithdrawAvaible(msg.sender)\n    {\n        uint amount = s_credit[msg.sender]; \n        // delete amount\n        delete(s_credit[msg.sender]);\n        // send money (with call)\n        (bool success,)= (msg.sender).call{value: amount}(\"\");\n        // emit\n        if(!success){\n            revert NFT_marketplace__invalidWithdraw();\n        }\n        emit withdrawSuccess(msg.sender, amount);\n    }\n\n    /* ---- GET Function ---*/\n    function getNFTPrice(address _NFTContract, uint _tokenId) public view returns(uint){\n        return s_listing[_NFTContract][_tokenId].price;\n    }\n\n    function getNFTLister(address _NFTContract, uint _tokenId) public view returns(address){\n        return s_listing[_NFTContract][_tokenId].sender;\n    }\n\n    function getAccountBalance(address account) public view returns(uint){\n        return s_credit[account];\n    }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}